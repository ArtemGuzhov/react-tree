{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport styles from './Tree.module.css';\nimport Branch from '../Branch/Branch';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n  const [showModal, setShowModal] = useState();\n  const [variant, setVariant] = useState('');\n\n  const addRootToNodes = value => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: value,\n      children: []\n    }]);\n  };\n\n  const addChildrenToRoot = rootId => {\n    setNodes(nodes => [...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children, {\n            id: v4(),\n            name: 'child',\n            children: []\n          }]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addNodeToChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes && nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addChildrenToRoot(node.id),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Branch, {\n          nodeChildren: node.children,\n          id: node.id,\n          updateNodeState: updateNodeState,\n          updateChildrenState: updateNodeState,\n          statusUpdateRoot: statusUpdateRoot,\n          statusUpdateChildren: statusUpdateChildren,\n          setStatusUpdateChildren: () => setStatusUpdateChildren(false),\n          addNodeHandler: addNodeToChildren,\n          deleteNodeHandler: deleteNodeFromChildren,\n          renameNodeHandler: renameNodeFromChildren\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this)\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }, this)), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      variant: variant,\n      close: () => setShowModal(false),\n      execution: addRootToNodes,\n      list: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setNodes([{\n          id: v4(),\n          name: 'mcc-tomsk.de',\n          children: []\n        }]);\n      },\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setVariant('root-delete');\n        setShowModal(true);\n      },\n      children: \"delete node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setVariant('root-create');\n        setShowModal(true);\n      },\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"n7TMOftrjezLH3128Je2TiP7LDk=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree/Tree.jsx"],"names":["React","useEffect","useState","v4","styles","Branch","Modal","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","showModal","setShowModal","variant","setVariant","addRootToNodes","value","addChildrenToRoot","rootId","map","node","addNodeToChildren","childId","child","deleteNodeFromChildren","filter","renameNodeFromChildren","updateNodeState","childrenStateUpdated","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport styles from './Tree.module.css'\r\nimport Branch from '../Branch/Branch'\r\nimport Modal from '../Modal/Modal'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false)\r\n  const [showModal, setShowModal] = useState()\r\n  const [variant, setVariant] = useState('')\r\n\r\n  const addRootToNodes = (value) => {\r\n    setNodes([...nodes, { id: v4(), name: value, children: [] }])\r\n  }\r\n\r\n  const addChildrenToRoot = (rootId) => {\r\n    setNodes((nodes) => [\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children,\r\n              { id: v4(), name: 'child', children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addNodeToChildren = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState = (rootId, childrenStateUpdated) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  return (\r\n    <div>\r\n      {nodes &&\r\n        nodes.map((node) => (\r\n          <ul key={node.id}>\r\n            <li>\r\n              {node.name}\r\n              <button onClick={() => addChildrenToRoot(node.id)}>+</button>\r\n              <Branch\r\n                nodeChildren={node.children}\r\n                id={node.id}\r\n                updateNodeState={updateNodeState}\r\n                updateChildrenState={updateNodeState}\r\n                statusUpdateRoot={statusUpdateRoot}\r\n                statusUpdateChildren={statusUpdateChildren}\r\n                setStatusUpdateChildren={() => setStatusUpdateChildren(false)}\r\n                addNodeHandler={addNodeToChildren}\r\n                deleteNodeHandler={deleteNodeFromChildren}\r\n                renameNodeHandler={renameNodeFromChildren}\r\n              />\r\n            </li>\r\n          </ul>\r\n        ))}\r\n      {showModal && (\r\n        <Modal\r\n          variant={variant}\r\n          close={() => setShowModal(false)}\r\n          execution={addRootToNodes}\r\n          list={nodes}\r\n        />\r\n      )}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() => {\r\n          setNodes([{ id: v4(), name: 'mcc-tomsk.de', children: [] }])\r\n        }}\r\n      >\r\n        reset\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setVariant('root-delete')\r\n          setShowModal(true)\r\n        }}\r\n      >\r\n        delete node\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setVariant('root-create')\r\n          setShowModal(true)\r\n        }}\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}