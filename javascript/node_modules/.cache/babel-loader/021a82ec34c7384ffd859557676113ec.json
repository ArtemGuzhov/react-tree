{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Branch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Branch = ({\n  nodeChildren,\n  id,\n  statusUpdateRoot,\n  statusUpdateChildren,\n  setStatusUpdateChildren,\n  updateNodeState,\n  updateChildrenState,\n  addNodeHandler,\n  deleteNodeHandler\n}) => {\n  _s();\n\n  const [children, setChildren] = useState(node);\n  const rootId = id;\n\n  const addNodeToChildren = (id, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteNodeFromChildren = (id, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const updateChildren = (id, child) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: child\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  useEffect(() => {\n    updateChildrenState(rootId, children);\n  }, [children]);\n  useEffect(() => {\n    if (statusUpdateRoot) {\n      setChildren(node);\n    }\n  }, [statusUpdateRoot]);\n  useEffect(() => {\n    if (statusUpdateChildren) {\n      setChildren(node);\n      setStatusUpdateChildren();\n    }\n  }, [statusUpdateChildren]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children && children.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNodeHandler(rootId, node.id),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNodeHandler(rootId, node.id),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(children),\n        children: \"log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Branch, {\n        nodeChildren: node.children,\n        id: node.id,\n        statusUpdateRoot: statusUpdateRoot,\n        statusUpdateChildren: statusUpdateChildren,\n        setStatusUpdateChildren: setStatusUpdateChildren,\n        updateNodeState: updateNodeState,\n        updateChildrenState: updateChildren,\n        addNodeHandler: addNodeToChildren,\n        deleteNodeHandler: deleteNodeFromChildren\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Branch, \"tHrq1zdPpy5PSUdf7mQ1p8ITYoc=\");\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Branch.jsx"],"names":["React","useEffect","useState","v4","Branch","nodeChildren","id","statusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","updateNodeState","updateChildrenState","addNodeHandler","deleteNodeHandler","children","setChildren","node","rootId","addNodeToChildren","childId","map","item","name","deleteNodeFromChildren","filter","updateChildren","child","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nconst Branch = ({\r\n  nodeChildren,\r\n  id,\r\n  statusUpdateRoot,\r\n  statusUpdateChildren,\r\n  setStatusUpdateChildren,\r\n  updateNodeState,\r\n  updateChildrenState,\r\n  addNodeHandler,\r\n  deleteNodeHandler,\r\n}) => {\r\n  const [children, setChildren] = useState(node)\r\n  const rootId = id\r\n\r\n  const addNodeToChildren = (id, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteNodeFromChildren = (id, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const updateChildren = (id, child) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return { ...node, children: child }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateChildrenState(rootId, children)\r\n  }, [children])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateRoot) {\r\n      setChildren(node)\r\n    }\r\n  }, [statusUpdateRoot])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateChildren) {\r\n      setChildren(node)\r\n      setStatusUpdateChildren()\r\n    }\r\n  }, [statusUpdateChildren])\r\n\r\n  return (\r\n    <ul>\r\n      {children &&\r\n        children.map((node) => (\r\n          <li key={node.id}>\r\n            {node.id}\r\n            <button onClick={() => addNodeHandler(rootId, node.id)}>+</button>\r\n            <button onClick={() => deleteNodeHandler(rootId, node.id)}>\r\n              -\r\n            </button>\r\n            <button onClick={() => console.log(children)}>log</button>\r\n\r\n            <Branch\r\n              nodeChildren={node.children}\r\n              id={node.id}\r\n              statusUpdateRoot={statusUpdateRoot}\r\n              statusUpdateChildren={statusUpdateChildren}\r\n              setStatusUpdateChildren={setStatusUpdateChildren}\r\n              updateNodeState={updateNodeState}\r\n              updateChildrenState={updateChildren}\r\n              addNodeHandler={addNodeToChildren}\r\n              deleteNodeHandler={deleteNodeFromChildren}\r\n            />\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}