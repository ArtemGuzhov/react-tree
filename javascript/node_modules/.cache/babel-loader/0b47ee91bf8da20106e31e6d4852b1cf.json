{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Branch.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Branch = ({\n  nodes,\n  id,\n  statusUpdateRoot,\n  statusUpdateChildren,\n  updateNodeState,\n  addNodeHandler,\n  deleteNodeHandler\n}) => {\n  _s();\n\n  const [children, setChildren] = useState(nodes);\n  const rootId = id;\n\n  const addNodeToChildren = (rootId, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const updateStateChildren = (rootId, child) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: child\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  useEffect(() => {\n    updateChild(rootId, children);\n  }, [children]);\n  useEffect(() => {\n    if (statusUpdateRoot) {\n      updateNodeState(nodes);\n    }\n  }, [statusUpdateRoot]);\n  useEffect(() => {\n    if (statusUpdateChildren) {\n      setChildren(nodes);\n      setStatusUpdateChildren();\n    }\n  }, [statusUpdateChildren]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children && children.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNodeHandler(rootId, node.id),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNodeHandler(rootId, node.id),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Branch, {\n        nodes: node,\n        id: node.id,\n        addNodeHandler: addNodeToChildren,\n        deleteNodeHandler: deleteNodeFromChildren,\n        statusUpdateRoot: statusUpdateRoot,\n        statusUpdateChildren: statusUpdateChildren,\n        updateNodeState: updateStateChildren\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Branch, \"4HPde1jI9+TIL+S8Lpe//+OaYgk=\");\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Branch.jsx"],"names":["React","Branch","nodes","id","statusUpdateRoot","statusUpdateChildren","updateNodeState","addNodeHandler","deleteNodeHandler","children","setChildren","useState","rootId","addNodeToChildren","childId","map","node","child","v4","name","deleteNodeFromChildren","filter","updateStateChildren","useEffect","updateChild","setStatusUpdateChildren"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nconst Branch = ({\r\n  nodes,\r\n  id,\r\n  statusUpdateRoot,\r\n  statusUpdateChildren,\r\n  updateNodeState,\r\n  addNodeHandler,\r\n  deleteNodeHandler,\r\n}) => {\r\n  const [children, setChildren] = useState(nodes)\r\n  const rootId = id\r\n\r\n  const addNodeToChildren = (rootId, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const updateStateChildren = (rootId, child) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return { ...node, children: child }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateChild(rootId, children)\r\n  }, [children])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateRoot) {\r\n      updateNodeState(nodes)\r\n    }\r\n  }, [statusUpdateRoot])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateChildren) {\r\n      setChildren(nodes)\r\n      setStatusUpdateChildren()\r\n    }\r\n  }, [statusUpdateChildren])\r\n\r\n  return (\r\n    <ul>\r\n      {children &&\r\n        children.map((node) => (\r\n          <li>\r\n            {node.id}\r\n            <button onClick={() => addNodeHandler(rootId, node.id)}>+</button>\r\n            <button onClick={() => deleteNodeHandler(rootId, node.id)}>\r\n              -\r\n            </button>\r\n\r\n            <Branch\r\n              nodes={node}\r\n              id={node.id}\r\n              addNodeHandler={addNodeToChildren}\r\n              deleteNodeHandler={deleteNodeFromChildren}\r\n              statusUpdateRoot={statusUpdateRoot}\r\n              statusUpdateChildren={statusUpdateChildren}\r\n              updateNodeState={updateStateChildren}\r\n            />\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}