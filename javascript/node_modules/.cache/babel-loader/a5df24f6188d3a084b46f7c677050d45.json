{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Child from './Child';\nimport Root from './Root';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet update;\n\nconst Tree = () => {\n  _s();\n\n  ;\n  [, update] = useState();\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [updateNodes, setUpdateNodes] = useState(false);\n  const [idRoot, setIdRoot] = useState('');\n  const [updateChild, setUpdateChild] = useState(false);\n  useEffect(() => {\n    console.log('tree update'); // console.log(updateNodes, idRoot)\n\n    setUpdateNodes(true); // setUpdateNodes(true)\n    // setNodes((prev) => nodes)\n  }, [nodes]);\n\n  const addChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateChild(true);\n  };\n\n  const setNewStateNodes = (id, newChildrens) => {\n    // const kek = newChildrens.id\n    // console.log(newChildrens)\n    // console.log\n    // console.log('updates?')\n    setNodes([...nodes.map((node, index) => {\n      if (node.id === id) {\n        // console.log()\n        return { ...node,\n          children: newChildrens\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateNodes(false);\n    setIdRoot('');\n  };\n\n  const deleteChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateChild(true);\n  }; // const deleteRootChildrenNode = (id) => {\n  //   console.log(id, nodes)\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            // console.log(nodes)\n            setNodes(nodes => [...nodes.map(item => {\n              if (item.id === node.id) {\n                return { ...item,\n                  children: [...item.children, {\n                    id: v4(),\n                    name: 'child',\n                    children: []\n                  }]\n                };\n              } else {\n                return item;\n              }\n            })]);\n            setUpdateChild(true);\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Child, {\n          node: node.children,\n          nodes: nodes,\n          id: node.id,\n          addNode: addChildrenNode,\n          deleteNode: deleteChildrenNode,\n          idRootOfTree: node.id,\n          setNewStateNodes: setNewStateNodes,\n          updateNodes: updateNodes,\n          setUpdateNodes: () => setIdRoot(node.id),\n          updateChild: setNewStateNodes,\n          level: true,\n          updateChild1: updateChild,\n          setUpdateChild: () => setUpdateChild(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNodes([...nodes, {\n        id: v4(),\n        name: 'root',\n        children: []\n      }]),\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"VI2N4rvrykQPVgDC5u3nqfbmS6c=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree.jsx"],"names":["React","useEffect","useState","v4","Child","Root","update","Tree","nodes","setNodes","id","name","children","updateNodes","setUpdateNodes","idRoot","setIdRoot","updateChild","setUpdateChild","console","log","addChildrenNode","childId","map","node","item","setNewStateNodes","newChildrens","index","deleteChildrenNode","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Child from './Child'\r\nimport Root from './Root'\r\nlet update\r\nconst Tree = () => {\r\n  ;[, update] = useState()\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n\r\n  const [updateNodes, setUpdateNodes] = useState(false)\r\n\r\n  const [idRoot, setIdRoot] = useState('')\r\n  const [updateChild, setUpdateChild] = useState(false)\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n    // console.log(updateNodes, idRoot)\r\n\r\n    setUpdateNodes(true)\r\n\r\n    // setUpdateNodes(true)\r\n\r\n    // setNodes((prev) => nodes)\r\n  }, [nodes])\r\n\r\n  const addChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setUpdateChild(true)\r\n  }\r\n\r\n  const setNewStateNodes = (id, newChildrens) => {\r\n    // const kek = newChildrens.id\r\n    // console.log(newChildrens)\r\n    // console.log\r\n    // console.log('updates?')\r\n    setNodes([\r\n      ...nodes.map((node, index) => {\r\n        if (node.id === id) {\r\n          // console.log()\r\n\r\n          return {\r\n            ...node,\r\n            children: newChildrens,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setUpdateNodes(false)\r\n    setIdRoot('')\r\n  }\r\n\r\n  const deleteChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setUpdateChild(true)\r\n  }\r\n\r\n  // const deleteRootChildrenNode = (id) => {\r\n  //   console.log(id, nodes)\r\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      {nodes.map((node) => (\r\n        <ul>\r\n          <li>\r\n            {node.id}\r\n            <button\r\n              onClick={() => {\r\n                // console.log(nodes)\r\n                setNodes((nodes) => [\r\n                  ...nodes.map((item) => {\r\n                    if (item.id === node.id) {\r\n                      return {\r\n                        ...item,\r\n                        children: [\r\n                          ...item.children,\r\n                          { id: v4(), name: 'child', children: [] },\r\n                        ],\r\n                      }\r\n                    } else {\r\n                      return item\r\n                    }\r\n                  }),\r\n                ])\r\n                setUpdateChild(true)\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <Child\r\n              node={node.children}\r\n              nodes={nodes}\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              deleteNode={deleteChildrenNode}\r\n              idRootOfTree={node.id}\r\n              setNewStateNodes={setNewStateNodes}\r\n              updateNodes={updateNodes}\r\n              setUpdateNodes={() => setIdRoot(node.id)}\r\n              updateChild={setNewStateNodes}\r\n              level={true}\r\n              updateChild1={updateChild}\r\n              setUpdateChild={() => setUpdateChild(false)}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ))}\r\n      {/* {nodes.map((node, index) => (\r\n        <Root\r\n          key={node.id}\r\n          node={node}\r\n          addNode={addRootChildrenNode}\r\n          deleteNode={deleteRootChildrenNode}\r\n        />\r\n      ))} */}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() =>\r\n          setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n        }\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}