{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Branch\\\\Branch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Modal from '../Modal/Modal';\nimport styles from './Branch.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Branch = ({\n  nodeChildren,\n  id,\n  statusUpdateRoot,\n  statusUpdateChildren,\n  setStatusUpdateChildren,\n  updateNodeState,\n  updateChildrenState,\n  addNodeHandler,\n  deleteNodeHandler,\n  renameNodeHandler\n}) => {\n  _s();\n\n  const [children, setChildren] = useState(nodeChildren);\n  const [showModal, setShowModal] = useState(false);\n  const [variant, setVariant] = useState('');\n  const rootId = id;\n\n  const addNodeToChildren = (rootId, childId, value) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: value,\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const updateChildren = (id, child) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: child\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  useEffect(() => {\n    updateChildrenState(rootId, children);\n  }, [children]);\n  useEffect(() => {\n    if (statusUpdateRoot) {\n      setChildren(nodeChildren);\n    }\n  }, [statusUpdateRoot]);\n  useEffect(() => {\n    if (statusUpdateChildren) {\n      setChildren(nodeChildren);\n      setStatusUpdateChildren();\n    }\n  }, [statusUpdateChildren]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children && children.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [node.name, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setVariant('root-create');\n          setShowModal(true); // addNodeHandler(rootId, node.id)\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNodeHandler(rootId, node.id),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => renameNodeHandler(rootId, node.id),\n        children: \"r\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: node.children.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        close: () => setShowModal(false),\n        variant: variant,\n        rootId: rootId,\n        childId: node.id,\n        create: addNodeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Branch, {\n        nodeChildren: node.children,\n        id: node.id,\n        statusUpdateRoot: statusUpdateRoot,\n        statusUpdateChildren: statusUpdateChildren,\n        setStatusUpdateChildren: setStatusUpdateChildren,\n        updateNodeState: updateNodeState,\n        updateChildrenState: updateChildren,\n        addNodeHandler: addNodeToChildren,\n        deleteNodeHandler: deleteNodeFromChildren,\n        renameNodeHandler: renameNodeFromChildren\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Branch, \"lvWNkZAOY7uu8YnpqGzhavpw8kc=\");\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Branch/Branch.jsx"],"names":["React","useEffect","useState","v4","Modal","styles","Branch","nodeChildren","id","statusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","updateNodeState","updateChildrenState","addNodeHandler","deleteNodeHandler","renameNodeHandler","children","setChildren","showModal","setShowModal","variant","setVariant","rootId","addNodeToChildren","childId","value","map","node","child","name","deleteNodeFromChildren","filter","renameNodeFromChildren","updateChildren","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Modal from '../Modal/Modal'\r\nimport styles from './Branch.module.css'\r\n\r\nconst Branch = ({\r\n  nodeChildren,\r\n  id,\r\n  statusUpdateRoot,\r\n  statusUpdateChildren,\r\n  setStatusUpdateChildren,\r\n  updateNodeState,\r\n  updateChildrenState,\r\n  addNodeHandler,\r\n  deleteNodeHandler,\r\n  renameNodeHandler,\r\n}) => {\r\n  const [children, setChildren] = useState(nodeChildren)\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [variant, setVariant] = useState('')\r\n\r\n  const rootId = id\r\n\r\n  const addNodeToChildren = (rootId, childId, value) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: value, children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const updateChildren = (id, child) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return { ...node, children: child }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateChildrenState(rootId, children)\r\n  }, [children])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateRoot) {\r\n      setChildren(nodeChildren)\r\n    }\r\n  }, [statusUpdateRoot])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateChildren) {\r\n      setChildren(nodeChildren)\r\n      setStatusUpdateChildren()\r\n    }\r\n  }, [statusUpdateChildren])\r\n\r\n  return (\r\n    <ul>\r\n      {children &&\r\n        children.map((node) => (\r\n          <li key={node.id}>\r\n            {node.name}\r\n            <button\r\n              onClick={() => {\r\n                setVariant('root-create')\r\n                setShowModal(true)\r\n                // addNodeHandler(rootId, node.id)\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <button onClick={() => deleteNodeHandler(rootId, node.id)}>\r\n              -\r\n            </button>\r\n            <button onClick={() => renameNodeHandler(rootId, node.id)}>\r\n              r\r\n            </button>\r\n            <span>{node.children.length}</span>\r\n            {showModal && (\r\n              <Modal\r\n                close={() => setShowModal(false)}\r\n                variant={variant}\r\n                rootId={rootId}\r\n                childId={node.id}\r\n                create={addNodeHandler}\r\n              />\r\n            )}\r\n\r\n            <Branch\r\n              nodeChildren={node.children}\r\n              id={node.id}\r\n              statusUpdateRoot={statusUpdateRoot}\r\n              statusUpdateChildren={statusUpdateChildren}\r\n              setStatusUpdateChildren={setStatusUpdateChildren}\r\n              updateNodeState={updateNodeState}\r\n              updateChildrenState={updateChildren}\r\n              addNodeHandler={addNodeToChildren}\r\n              deleteNodeHandler={deleteNodeFromChildren}\r\n              renameNodeHandler={renameNodeFromChildren}\r\n            />\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}