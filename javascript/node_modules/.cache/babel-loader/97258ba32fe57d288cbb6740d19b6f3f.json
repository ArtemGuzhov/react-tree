{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport styles from './Tree.module.css';\nimport Branch from '../Branch/Branch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: [{\n      id: v4(),\n      name: 'mcc-tomsk.de',\n      children: []\n    }]\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n\n  const addChildrenToRoot = rootId => {\n    console.log(nodes);\n    console.log(rootId);\n    setNodes(nodes => [...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children, {\n            id: v4(),\n            name: 'child',\n            children: []\n          }]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addRootToNodes = () => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: 'root',\n      children: []\n    }]);\n  };\n\n  const addNodeToChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    console.log('tree update');\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes && nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addChildrenToRoot(node.id),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Branch, {\n          nodeChildren: node.children,\n          id: node.id,\n          addNodeHandler: addNodeToChildren,\n          deleteNodeHandler: deleteNodeFromChildren,\n          updateNodeState: updateNodeState,\n          statusUpdateRoot: statusUpdateRoot,\n          updateChildrenState: updateNodeState,\n          statusUpdateChildren: statusUpdateChildren,\n          setStatusUpdateChildren: () => setStatusUpdateChildren(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, node.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRootToNodes,\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"oQfofQY9mlJPp0RxcWCiJ+77CBU=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree/Tree.jsx"],"names":["React","useEffect","useState","v4","styles","Branch","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","addChildrenToRoot","rootId","console","log","map","node","addRootToNodes","addNodeToChildren","childId","child","deleteNodeFromChildren","filter","updateNodeState","childrenStateUpdated"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport styles from './Tree.module.css'\r\nimport Branch from '../Branch/Branch'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [\r\n        {\r\n          id: v4(),\r\n          name: 'mcc-tomsk.de',\r\n          children: [],\r\n        },\r\n      ],\r\n    },\r\n  ])\r\n\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false)\r\n\r\n  const addChildrenToRoot = (rootId) => {\r\n    console.log(nodes)\r\n    console.log(rootId)\r\n    setNodes((nodes) => [\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children,\r\n              { id: v4(), name: 'child', children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addRootToNodes = () => {\r\n    setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n  }\r\n\r\n  const addNodeToChildren = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState = (rootId, childrenStateUpdated) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  return (\r\n    <div>\r\n      {nodes &&\r\n        nodes.map((node) => (\r\n          <ul key={node.id}>\r\n            <li>\r\n              {node.id}\r\n              <button onClick={() => addChildrenToRoot(node.id)}>+</button>\r\n              <Branch\r\n                nodeChildren={node.children}\r\n                id={node.id}\r\n                addNodeHandler={addNodeToChildren}\r\n                deleteNodeHandler={deleteNodeFromChildren}\r\n                updateNodeState={updateNodeState}\r\n                statusUpdateRoot={statusUpdateRoot}\r\n                updateChildrenState={updateNodeState}\r\n                statusUpdateChildren={statusUpdateChildren}\r\n                setStatusUpdateChildren={() => setStatusUpdateChildren(false)}\r\n              />\r\n            </li>\r\n          </ul>\r\n        ))}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button onClick={addRootToNodes}>add node</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}