{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Child from './Child';\nimport Root from './Root';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState([// {\n    //   id: v4(),\n    //   name: 'root',\n    //   children: [\n    //     {\n    //       id: v4(),\n    //       name: 'root',\n    //       children: [{ id: v4(), name: 'child', children: [] }],\n    //     },\n    //   ],\n    // },\n  ]); // useEffect(() => {}, [nodes])\n\n  const addChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const setNewStateNodes = (id, newChildrens) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: newChildrens\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  }; // const deleteRootChildrenNode = (id) => {\n  //   console.log(id, nodes)\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNodes(nodes => [...nodes.map(item => {\n            if (item.id === node.id) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Child, {\n          node: node.children,\n          id: node.id,\n          addNode: addChildrenNode,\n          deleteNode: deleteChildrenNode,\n          idRootOfTree: node.id,\n          setNewStateNodes: setNewStateNodes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNodes([...nodes, {\n        id: v4(),\n        name: 'root',\n        children: []\n      }]),\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"deZnyLJQu778WTCgdsG/Vf+O/x4=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree.jsx"],"names":["React","useEffect","useState","v4","Child","Root","Tree","nodes","setNodes","addChildrenNode","id","childId","map","node","children","item","name","setNewStateNodes","newChildrens","deleteChildrenNode","filter","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Child from './Child'\r\nimport Root from './Root'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    // {\r\n    //   id: v4(),\r\n    //   name: 'root',\r\n    //   children: [\r\n    //     {\r\n    //       id: v4(),\r\n    //       name: 'root',\r\n    //       children: [{ id: v4(), name: 'child', children: [] }],\r\n    //     },\r\n    //   ],\r\n    // },\r\n  ])\r\n\r\n  // useEffect(() => {}, [nodes])\r\n\r\n  const addChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const setNewStateNodes = (id, newChildrens) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: newChildrens,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  // const deleteRootChildrenNode = (id) => {\r\n  //   console.log(id, nodes)\r\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      {nodes.map((node) => (\r\n        <ul>\r\n          <li>\r\n            {node.id}\r\n            <button\r\n              onClick={() =>\r\n                setNodes((nodes) => [\r\n                  ...nodes.map((item) => {\r\n                    if (item.id === node.id) {\r\n                      return {\r\n                        ...item,\r\n                        children: [\r\n                          ...item.children,\r\n                          { id: v4(), name: 'child', children: [] },\r\n                        ],\r\n                      }\r\n                    } else {\r\n                      return item\r\n                    }\r\n                  }),\r\n                ])\r\n              }\r\n            >\r\n              +\r\n            </button>\r\n            <Child\r\n              node={node.children}\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              deleteNode={deleteChildrenNode}\r\n              idRootOfTree={node.id}\r\n              setNewStateNodes={setNewStateNodes}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ))}\r\n      {/* {nodes.map((node, index) => (\r\n        <Root\r\n          key={node.id}\r\n          node={node}\r\n          addNode={addRootChildrenNode}\r\n          deleteNode={deleteRootChildrenNode}\r\n        />\r\n      ))} */}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() =>\r\n          setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n        }\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}