{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Child.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Child = ({\n  node,\n  id,\n  addNode,\n  deleteNode,\n  idRootOfTree,\n  setNewStateNodes,\n  updateNodes,\n  updateChild,\n  nodes,\n  setUpdateChild,\n  updateChild1\n}) => {\n  _s();\n\n  const [children, setChildren] = useState(node);\n  const rootId = id;\n\n  const addChildrenNode = (id, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteChildrenNode = (id, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const updateChildren = (id, child) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: child\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  useEffect(() => {\n    updateChild(rootId, children);\n  }, [children]);\n  useEffect(() => {\n    if (updateNodes) {\n      setChildren(node);\n    }\n  }, [updateNodes]);\n  useEffect(() => {\n    if (updateChild1) {\n      setChildren(node);\n      setUpdateChild();\n    }\n  }, [updateChild1]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children && children.map(node => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNode(rootId, node.id),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNode(rootId, node.id),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => console.log(children),\n        children: \"log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Child, {\n        node: node.children,\n        id: node.id,\n        addNode: addChildrenNode,\n        updateNodes: updateNodes,\n        idRootOfTree: idRootOfTree,\n        setNewStateNodes: setNewStateNodes,\n        updateChild: updateChildren,\n        nodes: nodes,\n        deleteNode: deleteChildrenNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Child, \"tHrq1zdPpy5PSUdf7mQ1p8ITYoc=\");\n\n_c = Child;\nexport default Child;\n\nvar _c;\n\n$RefreshReg$(_c, \"Child\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Child.jsx"],"names":["React","useEffect","useState","v4","Child","node","id","addNode","deleteNode","idRootOfTree","setNewStateNodes","updateNodes","updateChild","nodes","setUpdateChild","updateChild1","children","setChildren","rootId","addChildrenNode","childId","map","item","name","deleteChildrenNode","filter","updateChildren","child","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\n\r\nconst Child = ({\r\n  node,\r\n  id,\r\n  addNode,\r\n  deleteNode,\r\n  idRootOfTree,\r\n  setNewStateNodes,\r\n  updateNodes,\r\n  updateChild,\r\n  nodes,\r\n  setUpdateChild,\r\n  updateChild1,\r\n}) => {\r\n  const [children, setChildren] = useState(node)\r\n  const rootId = id\r\n\r\n  const addChildrenNode = (id, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteChildrenNode = (id, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const updateChildren = (id, child) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return { ...node, children: child }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateChild(rootId, children)\r\n  }, [children])\r\n\r\n  useEffect(() => {\r\n    if (updateNodes) {\r\n      setChildren(node)\r\n    }\r\n  }, [updateNodes])\r\n\r\n  useEffect(() => {\r\n    if (updateChild1) {\r\n      setChildren(node)\r\n      setUpdateChild()\r\n    }\r\n  }, [updateChild1])\r\n\r\n  return (\r\n    <ul>\r\n      {children &&\r\n        children.map((node) => (\r\n          <li>\r\n            {node.id}\r\n            <button onClick={() => addNode(rootId, node.id)}>+</button>\r\n            <button onClick={() => deleteNode(rootId, node.id)}>-</button>\r\n            <button onClick={() => console.log(children)}>log</button>\r\n\r\n            <Child\r\n              node={node.children}\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              updateNodes={updateNodes}\r\n              idRootOfTree={idRootOfTree}\r\n              setNewStateNodes={setNewStateNodes}\r\n              updateChild={updateChildren}\r\n              nodes={nodes}\r\n              deleteNode={deleteChildrenNode}\r\n            />\r\n          </li>\r\n        ))}\r\n      {/* {}\r\n        <button onClick={() => addNode(children.id)}>+</button>\r\n        <button onClick={() => deleteNode(children.id)}>+</button> */}\r\n      {/* {children.children.map((node, index) => (\r\n          <Child key={node.id} node={node} />\r\n        ))} */}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Child\r\n"]},"metadata":{},"sourceType":"module"}