{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Child from './Child';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n  const [updateNodes, setUpdateNodes] = useState(false);\n  const [updateChild, setUpdateChild] = useState(false);\n\n  const addChildrenNode1 = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteChildrenNode1 = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState1 = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    console.log('tree update');\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n  useEffect(() => {\n    console.log('tree update');\n    setUpdateNodes(true);\n  }, [nodes]);\n\n  const addChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateChild(true);\n  };\n\n  const setNewStateNodes = (id, newChildrens) => {\n    setNodes([...nodes.map((node, index) => {\n      if (node.id === id) {\n        return { ...node,\n          children: newChildrens\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateNodes(false);\n  };\n\n  const deleteChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateChild(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setNodes(nodes => [...nodes.map(item => {\n              if (item.id === node.id) {\n                return { ...item,\n                  children: [...item.children, {\n                    id: v4(),\n                    name: 'child',\n                    children: []\n                  }]\n                };\n              } else {\n                return item;\n              }\n            })]);\n            setUpdateChild(true);\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Child, {\n          node: node.children,\n          nodes: nodes,\n          id: node.id,\n          addNode: addChildrenNode,\n          deleteNode: deleteChildrenNode,\n          idRootOfTree: node.id,\n          setNewStateNodes: setNewStateNodes,\n          updateNodes: updateNodes,\n          updateChild: setNewStateNodes,\n          level: true,\n          updateChild1: updateChild,\n          setUpdateChild: () => setUpdateChild(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNodes([...nodes, {\n        id: v4(),\n        name: 'root',\n        children: []\n      }]),\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"ir+SNltR+1d6cMxoEGz7ib4OMyc=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree.jsx"],"names":["React","useEffect","useState","v4","Child","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","updateNodes","setUpdateNodes","updateChild","setUpdateChild","addChildrenNode1","rootId","childId","map","node","child","deleteChildrenNode1","filter","updateNodeState1","childrenStateUpdated","console","log","addChildrenNode","item","setNewStateNodes","newChildrens","index","deleteChildrenNode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Child from './Child'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false)\r\n\r\n  const [updateNodes, setUpdateNodes] = useState(false)\r\n\r\n  const [updateChild, setUpdateChild] = useState(false)\r\n\r\n  const addChildrenNode1 = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteChildrenNode1 = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState1 = (rootId, childrenStateUpdated) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n\r\n    setUpdateNodes(true)\r\n  }, [nodes])\r\n\r\n  const addChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setUpdateChild(true)\r\n  }\r\n\r\n  const setNewStateNodes = (id, newChildrens) => {\r\n    setNodes([\r\n      ...nodes.map((node, index) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: newChildrens,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setUpdateNodes(false)\r\n  }\r\n\r\n  const deleteChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setUpdateChild(true)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {nodes.map((node) => (\r\n        <ul>\r\n          <li>\r\n            {node.id}\r\n            <button\r\n              onClick={() => {\r\n                setNodes((nodes) => [\r\n                  ...nodes.map((item) => {\r\n                    if (item.id === node.id) {\r\n                      return {\r\n                        ...item,\r\n                        children: [\r\n                          ...item.children,\r\n                          { id: v4(), name: 'child', children: [] },\r\n                        ],\r\n                      }\r\n                    } else {\r\n                      return item\r\n                    }\r\n                  }),\r\n                ])\r\n                setUpdateChild(true)\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <Child\r\n              node={node.children}\r\n              nodes={nodes}\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              deleteNode={deleteChildrenNode}\r\n              idRootOfTree={node.id}\r\n              setNewStateNodes={setNewStateNodes}\r\n              updateNodes={updateNodes}\r\n              updateChild={setNewStateNodes}\r\n              level={true}\r\n              updateChild1={updateChild}\r\n              setUpdateChild={() => setUpdateChild(false)}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ))}\r\n      {/* {nodes.map((node, index) => (\r\n        <Root\r\n          key={node.id}\r\n          node={node}\r\n          addNode={addRootChildrenNode}\r\n          deleteNode={deleteRootChildrenNode}\r\n        />\r\n      ))} */}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() =>\r\n          setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n        }\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}