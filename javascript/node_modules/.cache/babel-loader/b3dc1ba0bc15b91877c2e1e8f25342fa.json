{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree\\\\Tree.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport styles from './Tree.module.css';\nimport Branch from '../Branch/Branch';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n  const [showModal, setShowModal] = useState();\n  const [variant, setVariant] = useState('');\n\n  const addRootToNodes = value => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: value,\n      children: []\n    }]);\n  };\n\n  const deleteRootToNodes = id => {\n    setNodes([...nodes.filter(node => node.id !== id)]);\n  };\n\n  const addChildrenToRoot = (rootId, value) => {\n    setNodes(nodes => [...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children, {\n            id: v4(),\n            name: value,\n            children: []\n          }]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addNodeToChildren = (rootId, childId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: value,\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n\n  const Root = ({\n    id,\n    name\n  }) => {\n    _s();\n\n    const [showModal, setShowModal] = useState(false);\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [name, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowModal(true),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        variant: 'root-create',\n        rootId: id,\n        create: addChildrenToRoot,\n        close: () => setShowModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Root, \"uVlnG5KLfXemZk5i5Fl+Cg356FU=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes && nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(Root, {\n        id: node.id,\n        name: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Branch, {\n        nodeChildren: node.children,\n        id: node.id,\n        updateNodeState: updateNodeState,\n        updateChildrenState: updateNodeState,\n        statusUpdateRoot: statusUpdateRoot,\n        statusUpdateChildren: statusUpdateChildren,\n        setStatusUpdateChildren: () => setStatusUpdateChildren(false),\n        addNodeHandler: addNodeToChildren,\n        deleteNodeHandler: deleteNodeFromChildren,\n        renameNodeHandler: renameNodeFromChildren\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }, this)), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      variant: variant,\n      close: () => setShowModal(false),\n      create: addRootToNodes,\n      del: deleteRootToNodes,\n      list: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setNodes([{\n          id: v4(),\n          name: 'mcc-tomsk.de',\n          children: []\n        }]);\n      },\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setVariant('root-delete');\n        setShowModal(true);\n      },\n      children: \"delete node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setVariant('root-create');\n        setShowModal(true);\n      },\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Tree, \"n7TMOftrjezLH3128Je2TiP7LDk=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree/Tree.jsx"],"names":["React","useEffect","useState","v4","styles","Branch","Modal","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","showModal","setShowModal","variant","setVariant","addRootToNodes","value","deleteRootToNodes","filter","node","addChildrenToRoot","rootId","map","addNodeToChildren","childId","child","deleteNodeFromChildren","renameNodeFromChildren","updateNodeState","childrenStateUpdated","Root","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport styles from './Tree.module.css'\r\nimport Branch from '../Branch/Branch'\r\nimport Modal from '../Modal/Modal'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false)\r\n  const [showModal, setShowModal] = useState()\r\n  const [variant, setVariant] = useState('')\r\n\r\n  const addRootToNodes = (value) => {\r\n    setNodes([...nodes, { id: v4(), name: value, children: [] }])\r\n  }\r\n\r\n  const deleteRootToNodes = (id) => {\r\n    setNodes([...nodes.filter((node) => node.id !== id)])\r\n  }\r\n\r\n  const addChildrenToRoot = (rootId, value) => {\r\n    setNodes((nodes) => [\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children,\r\n              { id: v4(), name: value, children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addNodeToChildren = (rootId, childId, value) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: value, children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState = (rootId, childrenStateUpdated) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  const Root = ({ id, name }) => {\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    return (\r\n      <li>\r\n        {name}\r\n        <button onClick={() => setShowModal(true)}>+</button>\r\n        {showModal && (\r\n          <Modal\r\n            variant={'root-create'}\r\n            rootId={id}\r\n            create={addChildrenToRoot}\r\n            close={() => setShowModal(false)}\r\n          />\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {nodes &&\r\n        nodes.map((node) => (\r\n          <ul key={node.id}>\r\n            <Root id={node.id} name={node.name} />\r\n\r\n            <Branch\r\n              nodeChildren={node.children}\r\n              id={node.id}\r\n              updateNodeState={updateNodeState}\r\n              updateChildrenState={updateNodeState}\r\n              statusUpdateRoot={statusUpdateRoot}\r\n              statusUpdateChildren={statusUpdateChildren}\r\n              setStatusUpdateChildren={() => setStatusUpdateChildren(false)}\r\n              addNodeHandler={addNodeToChildren}\r\n              deleteNodeHandler={deleteNodeFromChildren}\r\n              renameNodeHandler={renameNodeFromChildren}\r\n            />\r\n          </ul>\r\n        ))}\r\n      {showModal && (\r\n        <Modal\r\n          variant={variant}\r\n          close={() => setShowModal(false)}\r\n          create={addRootToNodes}\r\n          del={deleteRootToNodes}\r\n          list={nodes}\r\n        />\r\n      )}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() => {\r\n          setNodes([{ id: v4(), name: 'mcc-tomsk.de', children: [] }])\r\n        }}\r\n      >\r\n        reset\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setVariant('root-delete')\r\n          setShowModal(true)\r\n        }}\r\n      >\r\n        delete node\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setVariant('root-create')\r\n          setShowModal(true)\r\n        }}\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}