{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Child from './Child';\nimport Root from './Root';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet update;\n\nconst Tree = () => {\n  _s();\n\n  ;\n  [, update] = useState();\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'root',\n    children: [{\n      id: v4(),\n      name: 'child',\n      children: [{\n        id: v4(),\n        name: 'child',\n        children: [{\n          id: v4(),\n          name: 'child',\n          children: [{\n            id: v4(),\n            name: 'child',\n            children: []\n          }]\n        }]\n      }]\n    }]\n  }, {\n    id: v4(),\n    name: 'child',\n    children: []\n  }]);\n  const [updateNodes, setUpdateNodes] = useState(false);\n  useEffect(() => {\n    console.log('tree update');\n    setUpdateNodes(true); // setNodes((prev) => nodes)\n  }, [nodes]);\n\n  const addChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const setNewStateNodes = (id, newChildrens) => {\n    const kek = newChildrens.id;\n    console.log(console.log(kek));\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        console.log(node);\n        return { ...node,\n          children: newChildrens\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setUpdateNodes(false);\n  };\n\n  const deleteChildrenNode = (id, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  }; // const deleteRootChildrenNode = (id) => {\n  //   console.log(id, nodes)\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log(nodes);\n            setNodes(nodes => [...nodes.map(item => {\n              if (item.id === node.id) {\n                return { ...item,\n                  children: [...item.children, {\n                    id: v4(),\n                    name: 'child',\n                    children: []\n                  }]\n                };\n              } else {\n                return item;\n              }\n            })]);\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Child, {\n          node: node.children,\n          nodes: nodes,\n          id: node.id,\n          addNode: addChildrenNode,\n          deleteNode: deleteChildrenNode,\n          idRootOfTree: node.id,\n          setNewStateNodes: setNewStateNodes,\n          updateNodes: updateNodes,\n          setUpdateNodes: setUpdateNodes,\n          updateChild: setNewStateNodes,\n          level: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNodes([...nodes, {\n        id: v4(),\n        name: 'root',\n        children: []\n      }]),\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"B+3oPZvaA7U72foiXvDEzT9782g=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree.jsx"],"names":["React","useEffect","useState","v4","Child","Root","update","Tree","nodes","setNodes","id","name","children","updateNodes","setUpdateNodes","console","log","addChildrenNode","childId","map","node","item","setNewStateNodes","newChildrens","kek","deleteChildrenNode","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Child from './Child'\r\nimport Root from './Root'\r\nlet update\r\nconst Tree = () => {\r\n  ;[, update] = useState()\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'root',\r\n      children: [\r\n        {\r\n          id: v4(),\r\n          name: 'child',\r\n          children: [\r\n            {\r\n              id: v4(),\r\n              name: 'child',\r\n              children: [\r\n                {\r\n                  id: v4(),\r\n                  name: 'child',\r\n                  children: [{ id: v4(), name: 'child', children: [] }],\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    { id: v4(), name: 'child', children: [] },\r\n  ])\r\n\r\n  const [updateNodes, setUpdateNodes] = useState(false)\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n\r\n    setUpdateNodes(true)\r\n\r\n    // setNodes((prev) => nodes)\r\n  }, [nodes])\r\n\r\n  const addChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const setNewStateNodes = (id, newChildrens) => {\r\n    const kek = newChildrens.id\r\n    console.log(console.log(kek))\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          console.log(node)\r\n          return {\r\n            ...node,\r\n            children: newChildrens,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setUpdateNodes(false)\r\n  }\r\n\r\n  const deleteChildrenNode = (id, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  // const deleteRootChildrenNode = (id) => {\r\n  //   console.log(id, nodes)\r\n  //   setNodes([...nodes.filter((node) => node.id !== id)])\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      {nodes.map((node) => (\r\n        <ul>\r\n          <li>\r\n            {node.id}\r\n            <button\r\n              onClick={() => {\r\n                console.log(nodes)\r\n                setNodes((nodes) => [\r\n                  ...nodes.map((item) => {\r\n                    if (item.id === node.id) {\r\n                      return {\r\n                        ...item,\r\n                        children: [\r\n                          ...item.children,\r\n                          { id: v4(), name: 'child', children: [] },\r\n                        ],\r\n                      }\r\n                    } else {\r\n                      return item\r\n                    }\r\n                  }),\r\n                ])\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <Child\r\n              node={node.children}\r\n              nodes={nodes}\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              deleteNode={deleteChildrenNode}\r\n              idRootOfTree={node.id}\r\n              setNewStateNodes={setNewStateNodes}\r\n              updateNodes={updateNodes}\r\n              setUpdateNodes={setUpdateNodes}\r\n              updateChild={setNewStateNodes}\r\n              level={true}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ))}\r\n      {/* {nodes.map((node, index) => (\r\n        <Root\r\n          key={node.id}\r\n          node={node}\r\n          addNode={addRootChildrenNode}\r\n          deleteNode={deleteRootChildrenNode}\r\n        />\r\n      ))} */}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button\r\n        onClick={() =>\r\n          setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n        }\r\n      >\r\n        add node\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}