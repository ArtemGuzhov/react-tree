{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Tree.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Child from './Child';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRootChildren, setStatusUpdateRootChildren] = useState(false); //updateNodes, setUpdateNodes\n\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false); //updateChild, setUpdateChild\n\n  useEffect(() => {\n    console.log('tree update');\n    setStatusUpdateRootChildren(true);\n  }, [nodes]);\n\n  const addChildrenNode = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(item => {\n            if (item.id === childId) {\n              return { ...item,\n                children: [...item.children, {\n                  id: v4(),\n                  name: 'child',\n                  children: []\n                }]\n              };\n            } else {\n              return item;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    statusUpdateChildren(true);\n  };\n\n  const setNewStateNodes = (id, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRootChildren(false);\n  };\n\n  const deleteChildrenNode = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(item => item.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addRootNode = () => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: 'root',\n      children: []\n    }]);\n  };\n\n  const addRootChildrenNode = rootId => {\n    console.log(rootId);\n    setNodes(nodes => [...nodes.map(item => {\n      if (item.id === rootId) {\n        return { ...item,\n          children: [...item.children, {\n            id: v4(),\n            name: 'child',\n            children: []\n          }]\n        };\n      } else {\n        return item;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [node.id, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addRootChildrenNode(node.id),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Child, {\n          nodes: node.children // node\n          ,\n          id: node.id,\n          addNode: addChildrenNode,\n          deleteNode: deleteChildrenNode,\n          setNewStateNodes: setNewStateNodes,\n          updateNodes: statusUpdateRootChildren,\n          updateChild: setNewStateNodes,\n          level: true,\n          updateChild1: statusUpdateChildren,\n          setUpdateChild: () => setStatusUpdateChildren(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(nodes),\n      children: \"nodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRootNode,\n      children: \"add node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tree, \"BJXw5jObo9WqAiJ+Z7+/qoL+Ac0=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Tree.jsx"],"names":["React","useEffect","useState","v4","Child","Tree","nodes","setNodes","id","name","children","statusUpdateRootChildren","setStatusUpdateRootChildren","statusUpdateChildren","setStatusUpdateChildren","console","log","addChildrenNode","rootId","childId","map","node","item","setNewStateNodes","childrenStateUpdated","deleteChildrenNode","filter","addRootNode","addRootChildrenNode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Child from './Child'\r\n\r\nconst Tree = () => {\r\n  const [nodes, setNodes] = useState([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n\r\n  const [statusUpdateRootChildren, setStatusUpdateRootChildren] =\r\n    useState(false) //updateNodes, setUpdateNodes\r\n\r\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false) //updateChild, setUpdateChild\r\n\r\n  useEffect(() => {\r\n    console.log('tree update')\r\n\r\n    setStatusUpdateRootChildren(true)\r\n  }, [nodes])\r\n\r\n  const addChildrenNode = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((item) => {\r\n                if (item.id === childId) {\r\n                  return {\r\n                    ...item,\r\n                    children: [\r\n                      ...item.children,\r\n                      { id: v4(), name: 'child', children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return item\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    statusUpdateChildren(true)\r\n  }\r\n\r\n  const setNewStateNodes = (id, childrenStateUpdated) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRootChildren(false)\r\n  }\r\n\r\n  const deleteChildrenNode = (rootId, childId) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [...node.children.filter((item) => item.id !== childId)],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addRootNode = () => {\r\n    setNodes([...nodes, { id: v4(), name: 'root', children: [] }])\r\n  }\r\n\r\n  const addRootChildrenNode = (rootId) => {\r\n    console.log(rootId)\r\n    setNodes((nodes) => [\r\n      ...nodes.map((item) => {\r\n        if (item.id === rootId) {\r\n          return {\r\n            ...item,\r\n            children: [\r\n              ...item.children,\r\n              { id: v4(), name: 'child', children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return item\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {nodes.map((node) => (\r\n        <ul>\r\n          <li>\r\n            {node.id}\r\n            <button onClick={() => addRootChildrenNode(node.id)}>+</button>\r\n            <Child\r\n              nodes={node.children} // node\r\n              id={node.id}\r\n              addNode={addChildrenNode}\r\n              deleteNode={deleteChildrenNode}\r\n              setNewStateNodes={setNewStateNodes}\r\n              updateNodes={statusUpdateRootChildren}\r\n              updateChild={setNewStateNodes}\r\n              level={true}\r\n              updateChild1={statusUpdateChildren}\r\n              setUpdateChild={() => setStatusUpdateChildren(false)}\r\n            />\r\n          </li>\r\n        </ul>\r\n      ))}\r\n      <button onClick={() => console.log(nodes)}>nodes</button>\r\n      <button onClick={addRootNode}>add node</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}