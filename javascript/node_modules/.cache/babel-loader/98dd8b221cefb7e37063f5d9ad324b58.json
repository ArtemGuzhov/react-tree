{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artem\\\\Desktop\\\\mmc\\\\src\\\\components\\\\Branch\\\\Branch.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Modal from '../Modal/Modal'; // import styles from './Branch.module.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Branch = ({\n  nodeChildren,\n  id,\n  statusUpdateRoot,\n  statusUpdateChildren,\n  setStatusUpdateChildren,\n  updateNodeState,\n  updateChildrenState,\n  addNodeHandler,\n  deleteNodeHandler,\n  renameNodeHandler\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [children, setChildren] = useState(nodeChildren);\n  const rootId = id;\n\n  const addNodeToChildren = (rootId, childId, value) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: value,\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\n    setChildren([...children.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const updateChildren = (id, child) => {\n    setChildren([...children.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          children: child\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  useEffect(() => {\n    updateChildrenState(rootId, children);\n  }, [children]);\n  useEffect(() => {\n    if (statusUpdateRoot) {\n      setChildren(nodeChildren);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [statusUpdateRoot]);\n  useEffect(() => {\n    if (statusUpdateChildren) {\n      setChildren(nodeChildren);\n      setStatusUpdateChildren();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [statusUpdateChildren]);\n\n  const Child = ({\n    id,\n    name\n  }) => {\n    _s();\n\n    const [showModal, setShowModal] = useState(false);\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [name, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowModal(true),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNodeHandler(rootId, id),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => renameNodeHandler(rootId, id),\n        children: \"r\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        variant: 'root-create',\n        close: () => setShowModal(false),\n        create: addNodeHandler,\n        rootId: rootId,\n        childId: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Child, \"uVlnG5KLfXemZk5i5Fl+Cg356FU=\");\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children && children.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Child, {\n        id: node.id,\n        name: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Branch, {\n        nodeChildren: node.children,\n        id: node.id,\n        statusUpdateRoot: statusUpdateRoot,\n        statusUpdateChildren: statusUpdateChildren,\n        setStatusUpdateChildren: setStatusUpdateChildren,\n        updateNodeState: updateNodeState,\n        updateChildrenState: updateChildren,\n        addNodeHandler: addNodeToChildren,\n        deleteNodeHandler: deleteNodeFromChildren,\n        renameNodeHandler: renameNodeFromChildren\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Branch, \"bPw9ygdT+AxRajL4xZXtMbrndIk=\");\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["C:/Users/artem/Desktop/mmc/src/components/Branch/Branch.jsx"],"names":["React","useEffect","useState","v4","Modal","Branch","nodeChildren","id","statusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","updateNodeState","updateChildrenState","addNodeHandler","deleteNodeHandler","renameNodeHandler","children","setChildren","rootId","addNodeToChildren","childId","value","map","node","child","name","deleteNodeFromChildren","filter","renameNodeFromChildren","updateChildren","Child","showModal","setShowModal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport Modal from '../Modal/Modal'\r\n// import styles from './Branch.module.css'\r\n\r\nconst Branch = ({\r\n  nodeChildren,\r\n  id,\r\n  statusUpdateRoot,\r\n  statusUpdateChildren,\r\n  setStatusUpdateChildren,\r\n  updateNodeState,\r\n  updateChildrenState,\r\n  addNodeHandler,\r\n  deleteNodeHandler,\r\n  renameNodeHandler,\r\n}) => {\r\n  const [children, setChildren] = useState(nodeChildren)\r\n\r\n  const rootId = id\r\n\r\n  const addNodeToChildren = (rootId, childId, value) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: value, children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId, childId) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const renameNodeFromChildren = (rootId, childId, value = 'Hello') => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const updateChildren = (id, child) => {\r\n    setChildren([\r\n      ...children.map((node) => {\r\n        if (node.id === id) {\r\n          return { ...node, children: child }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateChildrenState(rootId, children)\r\n  }, [children])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateRoot) {\r\n      setChildren(nodeChildren)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [statusUpdateRoot])\r\n\r\n  useEffect(() => {\r\n    if (statusUpdateChildren) {\r\n      setChildren(nodeChildren)\r\n      setStatusUpdateChildren()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [statusUpdateChildren])\r\n\r\n  const Child = ({ id, name }) => {\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    return (\r\n      <li>\r\n        {name}\r\n        <button onClick={() => setShowModal(true)}>+</button>\r\n        <button onClick={() => deleteNodeHandler(rootId, id)}>-</button>\r\n        <button onClick={() => renameNodeHandler(rootId, id)}>r</button>\r\n        {showModal && (\r\n          <Modal\r\n            variant={'root-create'}\r\n            close={() => setShowModal(false)}\r\n            create={addNodeHandler}\r\n            rootId={rootId}\r\n            childId={id}\r\n          />\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {children &&\r\n        children.map((node) => (\r\n          <div key={node.id}>\r\n            <Child id={node.id} name={node.name} />\r\n            <Branch\r\n              nodeChildren={node.children}\r\n              id={node.id}\r\n              statusUpdateRoot={statusUpdateRoot}\r\n              statusUpdateChildren={statusUpdateChildren}\r\n              setStatusUpdateChildren={setStatusUpdateChildren}\r\n              updateNodeState={updateNodeState}\r\n              updateChildrenState={updateChildren}\r\n              addNodeHandler={addNodeToChildren}\r\n              deleteNodeHandler={deleteNodeFromChildren}\r\n              renameNodeHandler={renameNodeFromChildren}\r\n            />\r\n          </div>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Branch\r\n"]},"metadata":{},"sourceType":"module"}