{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\ts\\\\src\\\\components\\\\Tree\\\\Tree.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Icon from '../../UI/Icon/Icon';\nimport Modal from '../../UI/Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [variant, setVariant] = useState('');\n\n  const addRootToNodes = value => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: value,\n      children: []\n    }]);\n  };\n\n  const deleteRootToNodes = id => {\n    setNodes([...nodes.filter(node => node.id !== id)]);\n  };\n\n  const renameRootToNodes = (id, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === id) {\n        return { ...node,\n          name: value\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const addChildrenToRoot = (rootId, value) => {\n    setNodes(nodes => [...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children, {\n            id: v4(),\n            name: value,\n            children: []\n          }]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addNodeToChildren = (rootId, childId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: value,\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n\n  const Root = ({\n    id,\n    name,\n    nodes\n  }) => {\n    _s();\n\n    const [showModal, setShowModal] = useState(false);\n    const [variant, setVariant] = useState('');\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name-node\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'nodes',\n        nodes: nodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'create',\n        execute: () => {\n          setVariant('root-create');\n          setShowModal(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'rename',\n        execute: () => {\n          setVariant('rename');\n          setShowModal(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        variant: variant,\n        rootId: id,\n        rename: renameRootToNodes,\n        name: name,\n        create: addChildrenToRoot,\n        close: () => setShowModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Root, \"qBswICvTz2C4CxbzLgMTAA+is3w=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(Tree, \"WXJer1M4g8IXAZ7XYFzJwn/jECI=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/ts/src/components/Tree/Tree.tsx"],"names":["React","useEffect","useState","v4","Icon","Modal","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","showModal","setShowModal","variant","setVariant","addRootToNodes","value","deleteRootToNodes","filter","node","renameRootToNodes","map","addChildrenToRoot","rootId","addNodeToChildren","childId","child","deleteNodeFromChildren","renameNodeFromChildren","updateNodeState","childrenStateUpdated","Root"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport { INode } from '../../types'\r\nimport Button from '../../UI/Button/Button'\r\nimport Icon from '../../UI/Icon/Icon'\r\nimport Modal from '../../UI/Modal/Modal'\r\n\r\ninterface RootProps {\r\n  id: string\r\n  name: string\r\n  nodes: number\r\n}\r\n\r\nconst Tree: FC = () => {\r\n  const [nodes, setNodes] = useState<Array<INode>>([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState<boolean>(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] =\r\n    useState<boolean>(false)\r\n  const [showModal, setShowModal] = useState<boolean>(false)\r\n  const [variant, setVariant] = useState<string>('')\r\n\r\n  const addRootToNodes = (value: string) => {\r\n    setNodes([...nodes, { id: v4(), name: value, children: [] }])\r\n  }\r\n\r\n  const deleteRootToNodes = (id: string) => {\r\n    setNodes([...nodes.filter((node) => node.id !== id)])\r\n  }\r\n\r\n  const renameRootToNodes = (id: string, value: string) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === id) {\r\n          return { ...node, name: value }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const addChildrenToRoot = (rootId: string, value: string) => {\r\n    setNodes((nodes) => [\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children,\r\n              { id: v4(), name: value, children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addNodeToChildren = (\r\n    rootId: string,\r\n    childId: string,\r\n    value: string\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: value, children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId: string, childId: string) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const renameNodeFromChildren = (\r\n    rootId: string,\r\n    childId: string,\r\n    value: string\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState = (\r\n    rootId: string,\r\n    childrenStateUpdated: Array<INode>\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  const Root: FC<RootProps> = ({ id, name, nodes }) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const [variant, setVariant] = useState<string>('')\r\n\r\n    return (\r\n      <li>\r\n        <span className=\"name-node\">{name}</span>\r\n        <Icon variant={'nodes'} nodes={nodes} />\r\n        <Icon\r\n          variant={'create'}\r\n          execute={() => {\r\n            setVariant('root-create')\r\n            setShowModal(true)\r\n          }}\r\n        />\r\n        <Icon\r\n          variant={'rename'}\r\n          execute={() => {\r\n            setVariant('rename')\r\n            setShowModal(true)\r\n          }}\r\n        />\r\n        {showModal && (\r\n          <Modal\r\n            variant={variant}\r\n            rootId={id}\r\n            rename={renameRootToNodes}\r\n            name={name}\r\n            create={addChildrenToRoot}\r\n            close={() => setShowModal(false)}\r\n          />\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return <div></div>\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}