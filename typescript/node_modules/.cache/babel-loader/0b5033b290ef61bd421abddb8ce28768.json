{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from 'react';\n// const tree = [\n//   {\n//     name: 'node1',\n//     subNodes: [\n//       {\n//         name: 'node1-1',\n//         subNodes: [],\n//       },\n//       {\n//         name: 'node1-2',\n//         subNodes: [],\n//       },\n//     ],\n//   },\n//   {\n//     name: 'node2',\n//     subNodes: [],\n//   },\n//   {\n//     name: 'node3',\n//     subNodes: [\n//       {\n//         name: 'node3-1',\n//         subNodes: [\n//           {\n//             name: 'node3-1-1',\n//             subNodes: [],\n//           },\n//           {\n//             name: 'node3-1-2',\n//             subNodes: [],\n//           },\n//         ],\n//       },\n//       {\n//         name: 'node3-2',\n//         subNodes: [],\n//       }\n//     ],\n//   },\n// ];\n// class App extends Component {\n//   renderSubNodes(subNodes: Array<[]>) {\n//     return (\n//       <ul>\n//         {subNodes.map(({name: string<''>, subNode: Array<[]>}) => (\n//           <li>\n//               {name}\n//               {this.renderSubNodes(subNodes)}\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n//   render() {\n//     return(\n//       <React.Fragment>\n//         <h1>Hello World!</h1>\n//         {this.renderSubNodes(tree)}\n//       </React.Fragment>\n//     )\n//   }\n// }\n// export default App;\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState([{\n    name: 'Artem',\n    _id: '1',\n    roots: [],\n    branches: [{\n      name: 'Artem2',\n      _id: '1',\n      roots: [],\n      branches: [{\n        name: 'Artem3',\n        _id: '1',\n        roots: [],\n        branches: []\n      }, {\n        name: 'Ivan3',\n        _id: '2',\n        roots: [],\n        branches: []\n      }]\n    }]\n  }, {\n    name: 'Ivan',\n    _id: '2',\n    roots: [],\n    branches: [{\n      name: 'Popa',\n      _id: '1',\n      roots: [],\n      branches: [{\n        name: 'Artem34',\n        _id: '1',\n        roots: [],\n        branches: []\n      }, {\n        name: 'Ivan34',\n        _id: '2',\n        roots: [],\n        branches: []\n      }]\n    }]\n  }]);\n\n  const renderState = state => {\n    // console.log(state)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.map((item, index) => {\n        // console.log(item)\n        // console.log(item.branches)\n        const branch = item.branches;\n        console.log(branch);\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: item === null || item === void 0 ? void 0 : item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderState(branch)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderState(state)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"yctOXZKrbK054XT8veZL6rbusAQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/src/App.tsx"],"names":["React","useState","App","state","setState","name","_id","roots","branches","renderState","map","item","index","branch","console","log"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n\n// const tree = [\n//   {\n//     name: 'node1',\n//     subNodes: [\n//       {\n//         name: 'node1-1',\n//         subNodes: [],\n//       },\n//       {\n//         name: 'node1-2',\n//         subNodes: [],\n//       },\n//     ],\n//   },\n//   {\n//     name: 'node2',\n//     subNodes: [],\n//   },\n//   {\n//     name: 'node3',\n//     subNodes: [\n//       {\n//         name: 'node3-1',\n//         subNodes: [\n//           {\n//             name: 'node3-1-1',\n//             subNodes: [],\n//           },\n//           {\n//             name: 'node3-1-2',\n//             subNodes: [],\n//           },\n//         ],\n//       },\n//       {\n//         name: 'node3-2',\n//         subNodes: [],\n//       }\n//     ],\n//   },\n// ];\n\n// class App extends Component {\n\n//   renderSubNodes(subNodes: Array<[]>) {\n//     return (\n//       <ul>\n//         {subNodes.map(({name: string<''>, subNode: Array<[]>}) => (\n//           <li>\n//               {name}\n//               {this.renderSubNodes(subNodes)}\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n\n//   render() {\n//     return(\n//       <React.Fragment>\n//         <h1>Hello World!</h1>\n//         {this.renderSubNodes(tree)}\n//       </React.Fragment>\n//     )\n//   }\n// }\n\n// export default App;\n\nimport React, { useState } from 'react'\nimport { IState } from './types'\n\nfunction App() {\n  const [state, setState] = useState<IState[]>([\n    {\n      name: 'Artem',\n      _id: '1',\n      roots: [],\n      branches: [\n        {\n          name: 'Artem2',\n          _id: '1',\n          roots: [],\n          branches: [\n            { name: 'Artem3', _id: '1', roots: [], branches: [] },\n            { name: 'Ivan3', _id: '2', roots: [], branches: [] },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'Ivan',\n      _id: '2',\n      roots: [],\n      branches: [\n        {\n          name: 'Popa',\n          _id: '1',\n          roots: [],\n          branches: [\n            { name: 'Artem34', _id: '1', roots: [], branches: [] },\n            { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n          ],\n        },\n      ],\n    },\n  ])\n\n  const renderState = (state: Array<IState>) => {\n    // console.log(state)\n\n    return (\n      <div>\n        {state.map((item, index) => {\n          // console.log(item)\n          // console.log(item.branches)\n          const branch = item.branches!\n          console.log(branch)\n\n          return (\n            <ul key={index}>\n              <li>{item?.name}</li>\n              <div>{renderState(branch)}</div>\n            </ul>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return <div>{renderState(state)}</div>\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}