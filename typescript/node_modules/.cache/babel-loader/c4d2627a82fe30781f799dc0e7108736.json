{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n// import React, { Component } from 'react';\n// const tree = [\n//   {\n//     name: 'node1',\n//     subNodes: [\n//       {\n//         name: 'node1-1',\n//         subNodes: [],\n//       },\n//       {\n//         name: 'node1-2',\n//         subNodes: [],\n//       },\n//     ],\n//   },\n//   {\n//     name: 'node2',\n//     subNodes: [],\n//   },\n//   {\n//     name: 'node3',\n//     subNodes: [\n//       {\n//         name: 'node3-1',\n//         subNodes: [\n//           {\n//             name: 'node3-1-1',\n//             subNodes: [],\n//           },\n//           {\n//             name: 'node3-1-2',\n//             subNodes: [],\n//           },\n//         ],\n//       },\n//       {\n//         name: 'node3-2',\n//         subNodes: [],\n//       }\n//     ],\n//   },\n// ];\n// class App extends Component {\n//   renderSubNodes(subNodes: Array<[]>) {\n//     return (\n//       <ul>\n//         {subNodes.map(({name: string<''>, subNode: Array<[]>}) => (\n//           <li>\n//               {name}\n//               {this.renderSubNodes(subNodes)}\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n//   render() {\n//     return(\n//       <React.Fragment>\n//         <h1>Hello World!</h1>\n//         {this.renderSubNodes(tree)}\n//       </React.Fragment>\n//     )\n//   }\n// }\n// export default App;\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState([{\n    name: 'Artem',\n    _id: '1',\n    roots: [],\n    branches: [{\n      name: 'Artem2',\n      _id: '1',\n      roots: [],\n      branches: [{\n        name: 'Artem3',\n        _id: '1',\n        roots: [],\n        branches: []\n      }, {\n        name: 'Ivan3',\n        _id: '2',\n        roots: [],\n        branches: []\n      }]\n    }, {\n      name: 'Sement2',\n      _id: '2',\n      roots: [],\n      branches: [{\n        name: 'Max3',\n        _id: '1',\n        roots: [],\n        branches: []\n      }, {\n        name: 'Mark3',\n        _id: '2',\n        roots: [],\n        branches: []\n      }]\n    }]\n  }, {\n    name: 'Ivan',\n    _id: '2',\n    roots: [],\n    branches: [{\n      name: 'Popa',\n      _id: '1',\n      roots: [],\n      branches: [{\n        name: 'Artem34',\n        _id: '1',\n        roots: [],\n        branches: []\n      }, {\n        name: 'Ivan34',\n        _id: '2',\n        roots: [],\n        branches: []\n      }]\n    }]\n  }]);\n\n  const renameHandler = () => {\n    let findNote = state;\n    const arrayId = ['1', '2', '1'];\n    arrayId.forEach((id, index) => {\n      // console.log(findNote)\n      console.log(id);\n\n      if (index === 0) {\n        console.log('Do', findNote);\n        findNote = findNote.filter(item => {\n          console.log('itterate');\n          console.log(item); // console.log(item._id === id, `${item._id} и ${id}`)\n\n          return item._id === id;\n        });\n        console.log('Posle', findNote);\n        console.log('next...');\n      } else {\n        console.log('Do', findNote);\n        findNote = findNote.filter(item => {\n          console.log('itterate');\n          console.log(item); // console.log(item._id === id, `${item._id} и ${id}`)\n\n          return item._id === id;\n        });\n        console.log('Posle', findNote);\n        console.log('next...');\n      }\n    }); // console.log(findNote)\n  };\n\n  renameHandler();\n\n  const renderState = state => {\n    // console.log(state)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.map((item, index) => {\n        // console.log(item)\n        // console.log(item.branches)\n        const branch = item.branches;\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: item === null || item === void 0 ? void 0 : item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderState(branch)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderState(state)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"RSeiCss9IIq9faWCsC4KqwTy8Ak=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/src/App.tsx"],"names":["React","useState","App","state","setState","name","_id","roots","branches","renameHandler","findNote","arrayId","forEach","id","index","console","log","filter","item","renderState","map","branch"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n\n// const tree = [\n//   {\n//     name: 'node1',\n//     subNodes: [\n//       {\n//         name: 'node1-1',\n//         subNodes: [],\n//       },\n//       {\n//         name: 'node1-2',\n//         subNodes: [],\n//       },\n//     ],\n//   },\n//   {\n//     name: 'node2',\n//     subNodes: [],\n//   },\n//   {\n//     name: 'node3',\n//     subNodes: [\n//       {\n//         name: 'node3-1',\n//         subNodes: [\n//           {\n//             name: 'node3-1-1',\n//             subNodes: [],\n//           },\n//           {\n//             name: 'node3-1-2',\n//             subNodes: [],\n//           },\n//         ],\n//       },\n//       {\n//         name: 'node3-2',\n//         subNodes: [],\n//       }\n//     ],\n//   },\n// ];\n\n// class App extends Component {\n\n//   renderSubNodes(subNodes: Array<[]>) {\n//     return (\n//       <ul>\n//         {subNodes.map(({name: string<''>, subNode: Array<[]>}) => (\n//           <li>\n//               {name}\n//               {this.renderSubNodes(subNodes)}\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n\n//   render() {\n//     return(\n//       <React.Fragment>\n//         <h1>Hello World!</h1>\n//         {this.renderSubNodes(tree)}\n//       </React.Fragment>\n//     )\n//   }\n// }\n\n// export default App;\n\nimport React, { useState } from 'react'\nimport { IState } from './types'\n\nfunction App() {\n  const [state, setState] = useState<IState[]>([\n    {\n      name: 'Artem',\n      _id: '1',\n      roots: [],\n      branches: [\n        {\n          name: 'Artem2',\n          _id: '1',\n          roots: [],\n          branches: [\n            { name: 'Artem3', _id: '1', roots: [], branches: [] },\n            { name: 'Ivan3', _id: '2', roots: [], branches: [] },\n          ],\n        },\n        {\n          name: 'Sement2',\n          _id: '2',\n          roots: [],\n          branches: [\n            { name: 'Max3', _id: '1', roots: [], branches: [] },\n            { name: 'Mark3', _id: '2', roots: [], branches: [] },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'Ivan',\n      _id: '2',\n      roots: [],\n      branches: [\n        {\n          name: 'Popa',\n          _id: '1',\n          roots: [],\n          branches: [\n            { name: 'Artem34', _id: '1', roots: [], branches: [] },\n            { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n          ],\n        },\n      ],\n    },\n  ])\n\n  const renameHandler = () => {\n    let findNote = state\n    const arrayId = ['1', '2', '1']\n\n    arrayId.forEach((id, index) => {\n      // console.log(findNote)\n      console.log(id)\n      if (index === 0) {\n        console.log('Do', findNote)\n        findNote = findNote.filter((item) => {\n          console.log('itterate')\n          console.log(item)\n          // console.log(item._id === id, `${item._id} и ${id}`)\n          return item._id === id\n        })\n        console.log('Posle', findNote)\n\n        console.log('next...')\n      } else {\n        console.log('Do', findNote)\n        findNote = findNote.filter((item) => {\n          console.log('itterate')\n          console.log(item)\n          // console.log(item._id === id, `${item._id} и ${id}`)\n          return item._id === id\n        })\n        console.log('Posle', findNote)\n\n        console.log('next...')\n      }\n    })\n\n    // console.log(findNote)\n  }\n\n  renameHandler()\n\n  const renderState = (state: Array<IState>) => {\n    // console.log(state)\n\n    return (\n      <div>\n        {state.map((item, index) => {\n          // console.log(item)\n          // console.log(item.branches)\n          const branch = item.branches!\n\n          return (\n            <ul key={index}>\n              <li>{item?.name}</li>\n              <div>{renderState(branch)}</div>\n            </ul>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return <div>{renderState(state)}</div>\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}