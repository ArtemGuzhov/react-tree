{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\ts\\\\src\\\\components\\\\Tree\\\\Tree.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { v4 } from 'uuid';\nimport Button from '../../UI/Button/Button';\nimport Icon from '../../UI/Icon/Icon';\nimport Modal from '../../UI/Modal/Modal';\nimport '../../styles/List.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tree = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [nodes, setNodes] = useState([{\n    id: v4(),\n    name: 'mcc-tomsk.de',\n    children: []\n  }]);\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState(false);\n  const [statusUpdateChildren, setStatusUpdateChildren] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [variant, setVariant] = useState('');\n\n  const addRootToNodes = value => {\n    setNodes([...nodes, {\n      id: v4(),\n      name: value,\n      children: []\n    }]);\n  };\n\n  const deleteRootToNodes = rootId => {\n    setNodes([...nodes.filter(node => node.id !== rootId)]);\n  };\n\n  const renameRootToNodes = (rootId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          name: value\n        };\n      } else {\n        return node;\n      }\n    })]);\n  };\n\n  const addChildrenToRoot = (rootId, value) => {\n    setNodes(nodes => [...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children, {\n            id: v4(),\n            name: value,\n            children: []\n          }]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const addNodeToChildren = (rootId, childId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                children: [...child.children, {\n                  id: v4(),\n                  name: value,\n                  children: []\n                }]\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const deleteNodeFromChildren = (rootId, childId) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.filter(child => child.id !== childId)]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const renameNodeFromChildren = (rootId, childId, value) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: [...node.children.map(child => {\n            if (child.id === childId) {\n              return { ...child,\n                name: value\n              };\n            } else {\n              return child;\n            }\n          })]\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateChildren(true);\n  };\n\n  const updateNodeState = (rootId, childrenStateUpdated) => {\n    setNodes([...nodes.map(node => {\n      if (node.id === rootId) {\n        return { ...node,\n          children: childrenStateUpdated\n        };\n      } else {\n        return node;\n      }\n    })]);\n    setStatusUpdateRoot(false);\n  };\n\n  useEffect(() => {\n    setStatusUpdateRoot(true);\n  }, [nodes]);\n\n  const Root = ({\n    id,\n    name,\n    nodes\n  }) => {\n    _s();\n\n    const [showModal, setShowModal] = useState(false);\n    const [variant, setVariant] = useState('');\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name-node\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'nodes',\n        nodes: nodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'create',\n        execute: () => {\n          setVariant('root-create');\n          setShowModal(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        variant: 'rename',\n        execute: () => {\n          setVariant('rename');\n          setShowModal(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        variant: variant,\n        rootId: id,\n        rename: renameRootToNodes,\n        name: name,\n        create: addChildrenToRoot,\n        close: () => setShowModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(Root, \"qBswICvTz2C4CxbzLgMTAA+is3w=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '90vh',\n        overflow: 'auto'\n      },\n      children: nodes && nodes.map(node => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(Root, {\n          id: node.id,\n          name: node.name,\n          nodes: node.children.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this)\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '5vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: 'info',\n        execute: () => console.log(nodes),\n        children: \"Console.log(TREE)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: 'secondary',\n        execute: () => {\n          setNodes([{\n            id: v4(),\n            name: 'mcc-tomsk.de',\n            children: []\n          }]);\n        },\n        children: \"Reset tree state\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: 'danger',\n        execute: () => {\n          setVariant('root-delete');\n          setShowModal(true);\n        },\n        children: \"Remote the root from the tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: 'success',\n        execute: () => {\n          setVariant('root-create');\n          setShowModal(true);\n        },\n        children: \"Add root to tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Tree, \"WXJer1M4g8IXAZ7XYFzJwn/jECI=\");\n\n_c = Tree;\nexport default Tree;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/ts/src/components/Tree/Tree.tsx"],"names":["React","useEffect","useState","v4","Button","Icon","Modal","Tree","nodes","setNodes","id","name","children","statusUpdateRoot","setStatusUpdateRoot","statusUpdateChildren","setStatusUpdateChildren","showModal","setShowModal","variant","setVariant","addRootToNodes","value","deleteRootToNodes","rootId","filter","node","renameRootToNodes","map","addChildrenToRoot","addNodeToChildren","childId","child","deleteNodeFromChildren","renameNodeFromChildren","updateNodeState","childrenStateUpdated","Root","height","overflow","length","console","log"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useState } from 'react'\r\nimport { v4 } from 'uuid'\r\nimport { INode } from '../../types'\r\nimport Button from '../../UI/Button/Button'\r\nimport Icon from '../../UI/Icon/Icon'\r\nimport Modal from '../../UI/Modal/Modal'\r\nimport '../../styles/List.css'\r\n\r\ninterface RootProps {\r\n  id: string\r\n  name: string\r\n  nodes: number\r\n}\r\n\r\nconst Tree: FC = () => {\r\n  const [nodes, setNodes] = useState<Array<INode>>([\r\n    {\r\n      id: v4(),\r\n      name: 'mcc-tomsk.de',\r\n      children: [],\r\n    },\r\n  ])\r\n  const [statusUpdateRoot, setStatusUpdateRoot] = useState<boolean>(false)\r\n  const [statusUpdateChildren, setStatusUpdateChildren] =\r\n    useState<boolean>(false)\r\n  const [showModal, setShowModal] = useState<boolean>(false)\r\n  const [variant, setVariant] = useState<string>('')\r\n\r\n  const addRootToNodes = (value: string) => {\r\n    setNodes([...nodes, { id: v4(), name: value, children: [] }])\r\n  }\r\n\r\n  const deleteRootToNodes = (rootId: string) => {\r\n    setNodes([...nodes.filter((node) => node.id !== rootId)])\r\n  }\r\n\r\n  const renameRootToNodes = (rootId: string, value: string) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return { ...node, name: value }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const addChildrenToRoot = (rootId: string, value: string) => {\r\n    setNodes((nodes) => [\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children,\r\n              { id: v4(), name: value, children: [] },\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const addNodeToChildren = (\r\n    rootId: string,\r\n    childId: string,\r\n    value: string\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    children: [\r\n                      ...child.children,\r\n                      { id: v4(), name: value, children: [] },\r\n                    ],\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const deleteNodeFromChildren = (rootId: string, childId: string) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.filter((child) => child.id !== childId),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const renameNodeFromChildren = (\r\n    rootId: string,\r\n    childId: string,\r\n    value: string\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.map((child) => {\r\n                if (child.id === childId) {\r\n                  return {\r\n                    ...child,\r\n                    name: value,\r\n                  }\r\n                } else {\r\n                  return child\r\n                }\r\n              }),\r\n            ],\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateChildren(true)\r\n  }\r\n\r\n  const updateNodeState = (\r\n    rootId: string,\r\n    childrenStateUpdated: Array<INode>\r\n  ) => {\r\n    setNodes([\r\n      ...nodes.map((node) => {\r\n        if (node.id === rootId) {\r\n          return {\r\n            ...node,\r\n            children: childrenStateUpdated,\r\n          }\r\n        } else {\r\n          return node\r\n        }\r\n      }),\r\n    ])\r\n    setStatusUpdateRoot(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStatusUpdateRoot(true)\r\n  }, [nodes])\r\n\r\n  const Root: FC<RootProps> = ({ id, name, nodes }) => {\r\n    const [showModal, setShowModal] = useState<boolean>(false)\r\n    const [variant, setVariant] = useState<string>('')\r\n\r\n    return (\r\n      <li>\r\n        <span className=\"name-node\">{name}</span>\r\n        <Icon variant={'nodes'} nodes={nodes} />\r\n        <Icon\r\n          variant={'create'}\r\n          execute={() => {\r\n            setVariant('root-create')\r\n            setShowModal(true)\r\n          }}\r\n        />\r\n        <Icon\r\n          variant={'rename'}\r\n          execute={() => {\r\n            setVariant('rename')\r\n            setShowModal(true)\r\n          }}\r\n        />\r\n        {showModal && (\r\n          <Modal\r\n            variant={variant}\r\n            rootId={id}\r\n            rename={renameRootToNodes}\r\n            name={name}\r\n            create={addChildrenToRoot}\r\n            close={() => setShowModal(false)}\r\n          />\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ height: '90vh', overflow: 'auto' }}>\r\n        {nodes &&\r\n          nodes.map((node) => (\r\n            <ul key={node.id}>\r\n              <Root\r\n                id={node.id}\r\n                name={node.name}\r\n                nodes={node.children.length}\r\n              />\r\n            </ul>\r\n          ))}\r\n      </div>\r\n      <div style={{ height: '5vh' }}>\r\n        <Button variant={'info'} execute={() => console.log(nodes)}>\r\n          Console.log(TREE)\r\n        </Button>\r\n        <Button\r\n          variant={'secondary'}\r\n          execute={() => {\r\n            setNodes([{ id: v4(), name: 'mcc-tomsk.de', children: [] }])\r\n          }}\r\n        >\r\n          Reset tree state\r\n        </Button>\r\n\r\n        <Button\r\n          variant={'danger'}\r\n          execute={() => {\r\n            setVariant('root-delete')\r\n            setShowModal(true)\r\n          }}\r\n        >\r\n          Remote the root from the tree\r\n        </Button>\r\n        <Button\r\n          variant={'success'}\r\n          execute={() => {\r\n            setVariant('root-create')\r\n            setShowModal(true)\r\n          }}\r\n        >\r\n          Add root to tree\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tree\r\n"]},"metadata":{},"sourceType":"module"}