{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport RootNote from './components/RootNote';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [state, setState] = useState<IState[]>([\n  //   {\n  //     name: 'Artem',\n  //     _id: '1',\n  //     roots: [],\n  //     branches: [],\n  //   },\n  //   {\n  //     name: 'Ivan',\n  //     _id: '2',\n  //     roots: [],\n  //     branches: [\n  //       {\n  //         name: 'Popa',\n  //         _id: '1',\n  //         roots: [],\n  //         branches: [\n  //           { name: 'Artem34', _id: '1', roots: [], branches: [] },\n  //           { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n  //         ],\n  //       },\n  //     ],\n  //   },\n  // ])\n  // const renameHandler = () => {\n  //   let findNote = state\n  //   let findElem = {}\n  //   const arrayId = ['2', '1', '2']\n  //   arrayId.forEach((id, index, arr) => {\n  //     let len: number = arr.length\n  //     if (index !== len - 1) {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findNote = item?.branches!\n  //         }\n  //       })\n  //     } else {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findElem = item\n  //           console.log(findElem)\n  //         }\n  //       })\n  //     }\n  //   })\n  // }\n  // renameHandler()\n  const [notes, setNotes] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: notes.map(note => /*#__PURE__*/_jsxDEV(RootNote, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GQLmJKrKSWtt27ULSmYSMpXke/c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/src/App.tsx"],"names":["React","useState","RootNote","App","notes","setNotes","map","note"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAU,EAAV,CAAlC;AAEA,sBACE;AAAA,cACGG,KAAK,CAACE,GAAN,CAAWC,IAAD,iBACT,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA9DQJ,G;;KAAAA,G;AAgET,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport RootNote from './components/RootNote'\nimport { INote } from './types'\n\nfunction App() {\n  // const [state, setState] = useState<IState[]>([\n  //   {\n  //     name: 'Artem',\n  //     _id: '1',\n  //     roots: [],\n  //     branches: [],\n  //   },\n  //   {\n  //     name: 'Ivan',\n  //     _id: '2',\n  //     roots: [],\n  //     branches: [\n  //       {\n  //         name: 'Popa',\n  //         _id: '1',\n  //         roots: [],\n  //         branches: [\n  //           { name: 'Artem34', _id: '1', roots: [], branches: [] },\n  //           { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n  //         ],\n  //       },\n  //     ],\n  //   },\n  // ])\n\n  // const renameHandler = () => {\n  //   let findNote = state\n  //   let findElem = {}\n  //   const arrayId = ['2', '1', '2']\n\n  //   arrayId.forEach((id, index, arr) => {\n  //     let len: number = arr.length\n\n  //     if (index !== len - 1) {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findNote = item?.branches!\n  //         }\n  //       })\n  //     } else {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findElem = item\n  //           console.log(findElem)\n  //         }\n  //       })\n  //     }\n  //   })\n  // }\n\n  // renameHandler()\n\n  const [notes, setNotes] = useState<INote[]>([])\n\n  return (\n    <ul>\n      {notes.map((note) => (\n        <RootNote />\n      ))}\n    </ul>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}