{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\mcc-tomsk\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport List from './components/List';\nimport Note from './components/Note';\nimport { v4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [state, setState] = useState<IState[]>([\n  //   {\n  //     name: 'Artem',\n  //     _id: '1',\n  //     roots: [],\n  //     branches: [],\n  //   },\n  //   {\n  //     name: 'Ivan',\n  //     _id: '2',\n  //     roots: [],\n  //     branches: [\n  //       {\n  //         name: 'Popa',\n  //         _id: '1',\n  //         roots: [],\n  //         branches: [\n  //           { name: 'Artem34', _id: '1', roots: [], branches: [] },\n  //           { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n  //         ],\n  //       },\n  //     ],\n  //   },\n  // ])\n  // const renameHandler = () => {\n  //   let findNote = state\n  //   let findElem = {}\n  //   const arrayId = ['2', '1', '2']\n  //   arrayId.forEach((id, index, arr) => {\n  //     let len: number = arr.length\n  //     if (index !== len - 1) {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findNote = item?.branches!\n  //         }\n  //       })\n  //     } else {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findElem = item\n  //           console.log(findElem)\n  //         }\n  //       })\n  //     }\n  //   })\n  // }\n  // renameHandler()\n  const [notes, setNotes] = useState([{\n    _id: v4(),\n    title: '1',\n    childrens: [{\n      _id: v4(),\n      title: '2',\n      childrens: [{\n        _id: v4(),\n        title: '3',\n        childrens: []\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      items: notes,\n      renderItem: note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LH1Ga/NScYgGKZykS13UllXOYy4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Projects/mcc-tomsk/src/App.tsx"],"names":["React","useState","List","Note","v4","App","notes","setNotes","_id","title","childrens","note"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,EAAT,QAAmB,MAAnB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAU,CAC1C;AACEO,IAAAA,GAAG,EAAEJ,EAAE,EADT;AAEEK,IAAAA,KAAK,EAAE,GAFT;AAGEC,IAAAA,SAAS,EAAE,CACT;AACEF,MAAAA,GAAG,EAAEJ,EAAE,EADT;AAEEK,MAAAA,KAAK,EAAE,GAFT;AAGEC,MAAAA,SAAS,EAAE,CAAC;AAAEF,QAAAA,GAAG,EAAEJ,EAAE,EAAT;AAAaK,QAAAA,KAAK,EAAE,GAApB;AAAyBC,QAAAA,SAAS,EAAE;AAApC,OAAD;AAHb,KADS;AAHb,GAD0C,CAAV,CAAlC;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,KAAK,EAAEJ,KADT;AAEE,MAAA,UAAU,EAAGK,IAAD,iBAAiB,QAAC,IAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAWA,IAAI,CAACH,GAAhB;AAAA;AAAA;AAAA;AAAA;AAF/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA3EQH,G;;KAAAA,G;AA6ET,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport List from './components/List'\nimport Note from './components/Note'\nimport { v4 } from 'uuid'\nimport { INote } from './types'\n\nfunction App() {\n  // const [state, setState] = useState<IState[]>([\n  //   {\n  //     name: 'Artem',\n  //     _id: '1',\n  //     roots: [],\n  //     branches: [],\n  //   },\n  //   {\n  //     name: 'Ivan',\n  //     _id: '2',\n  //     roots: [],\n  //     branches: [\n  //       {\n  //         name: 'Popa',\n  //         _id: '1',\n  //         roots: [],\n  //         branches: [\n  //           { name: 'Artem34', _id: '1', roots: [], branches: [] },\n  //           { name: 'Ivan34', _id: '2', roots: [], branches: [] },\n  //         ],\n  //       },\n  //     ],\n  //   },\n  // ])\n\n  // const renameHandler = () => {\n  //   let findNote = state\n  //   let findElem = {}\n  //   const arrayId = ['2', '1', '2']\n\n  //   arrayId.forEach((id, index, arr) => {\n  //     let len: number = arr.length\n\n  //     if (index !== len - 1) {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findNote = item?.branches!\n  //         }\n  //       })\n  //     } else {\n  //       findNote.filter((item) => {\n  //         if (item._id === id) {\n  //           findElem = item\n  //           console.log(findElem)\n  //         }\n  //       })\n  //     }\n  //   })\n  // }\n\n  // renameHandler()\n\n  const [notes, setNotes] = useState<INote[]>([\n    {\n      _id: v4(),\n      title: '1',\n      childrens: [\n        {\n          _id: v4(),\n          title: '2',\n          childrens: [{ _id: v4(), title: '3', childrens: [] }],\n        },\n      ],\n    },\n  ])\n\n  return (\n    <ul>\n      <List\n        items={notes}\n        renderItem={(note: INote) => <Note key={note._id} note={note} />}\n      />\n    </ul>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}